import { Question } from '@/features/mockInterviews/types/questions';

export const expressQuestions: Question[] = [
  {
    id: 1,
    question: 'What is Express.js?',
    code: "const express = require('express');\nconst app = express();",
    options: [
      'A frontend JavaScript framework',
      'A minimal web application framework for Node.js',
      'A database management system',
      'A testing library',
    ],
    correctAnswer: 1,
  },
  {
    id: 2,
    question: 'How do you create a basic Express server?',
    code: "const express = require('express');\nconst app = express();\napp.listen(3000);",
    options: ['express.createServer()', 'express().start()', 'express().listen()', 'All of the above'],
    correctAnswer: 2,
  },
  {
    id: 3,
    question: 'What is middleware in Express?',
    code: "app.use((req, res, next) => {\n  console.log('Middleware');\n  next();\n});",
    options: [
      'Functions that have access to request/response objects',
      'Template engine configuration',
      'Database connection handlers',
      'Error logging utilities',
    ],
    correctAnswer: 0,
  },
  {
    id: 4,
    question: 'How do you handle a GET request in Express?',
    code: "app.get('/route', (req, res) => {\n  res.send('Response');\n});",
    options: ['app.post()', 'app.fetch()', 'app.get()', 'app.handleGet()'],
    correctAnswer: 2,
  },
  {
    id: 5,
    question: 'What does this code do?',
    code: 'app.use(express.json());',
    options: [
      'Parses JSON request bodies',
      'Sends JSON responses',
      'Configures JSON templates',
      'Validates JSON schemas',
    ],
    correctAnswer: 0,
  },
  {
    id: 6,
    question: 'How do you serve static files in Express?',
    code: "app.use(express.static('public'));",
    options: ['express.files()', 'express.static()', 'express.public()', 'express.serve()'],
    correctAnswer: 1,
  },
  {
    id: 7,
    question: 'What is the purpose of app.set()?',
    code: "app.set('view engine', 'ejs');",
    options: ['To configure application settings', 'To set HTTP headers', 'To define routes', 'To store session data'],
    correctAnswer: 0,
  },
  {
    id: 8,
    question: 'How do you access route parameters?',
    code: "app.get('/users/:id', (req, res) => {\n  res.send(req.params.id);\n});",
    options: ['req.query', 'req.body', 'req.params', 'req.args'],
    correctAnswer: 2,
  },
  {
    id: 9,
    question: 'What is the correct way to handle errors in Express?',
    code: "app.use((err, req, res, next) => {\n  console.error(err);\n  res.status(500).send('Error');\n});",
    options: ['try-catch blocks only', 'Error-handling middleware', 'Global error handlers', 'Both B and C'],
    correctAnswer: 3,
  },
  {
    id: 10,
    question: 'How do you set cookies in Express?',
    code: "res.cookie('name', 'value');",
    options: ['req.setCookie()', 'res.cookie()', 'express.cookie()', 'app.cookie()'],
    correctAnswer: 1,
  },
  {
    id: 11,
    question: 'What is the purpose of express.Router()?',
    code: "const router = express.Router();\nrouter.get('/', (req, res) => {});",
    options: [
      'To create modular route handlers',
      'To redirect requests',
      'To validate routes',
      'To mock HTTP requests',
    ],
    correctAnswer: 0,
  },
  {
    id: 12,
    question: 'How do you access query parameters?',
    code: "app.get('/search', (req, res) => {\n  res.send(req.query.q);\n});",
    options: ['req.params', 'req.query', 'req.body', 'req.args'],
    correctAnswer: 1,
  },
  {
    id: 13,
    question: 'What does res.send() do?',
    code: "res.send('Hello');",
    options: ['Sends HTTP response', 'Sends HTTP request', 'Sets HTTP headers only', 'Ends the middleware chain'],
    correctAnswer: 0,
  },
  {
    id: 14,
    question: 'How do you redirect in Express?',
    code: "res.redirect('/new-route');",
    options: ['res.forward()', 'res.redirect()', 'res.goTo()', 'res.location()'],
    correctAnswer: 1,
  },
  {
    id: 15,
    question: 'What is the purpose of next() in middleware?',
    code: 'app.use((req, res, next) => {\n  next();\n});',
    options: [
      'Passes control to next middleware',
      'Ends the request-response cycle',
      'Skips error handling',
      'Restarts the middleware chain',
    ],
    correctAnswer: 0,
  },
  {
    id: 16,
    question: 'How do you handle POST requests?',
    code: "app.post('/submit', (req, res) => {\n  res.send(req.body);\n});",
    options: ['app.get()', 'app.post()', 'app.put()', 'app.delete()'],
    correctAnswer: 1,
  },
  {
    id: 17,
    question: 'What is the purpose of app.all()?',
    code: "app.all('/path', (req, res) => {});",
    options: [
      'Handles all HTTP methods for a route',
      'Matches all routes',
      'Handles only GET and POST',
      'Handles only static files',
    ],
    correctAnswer: 0,
  },
  {
    id: 18,
    question: 'How do you set response status code?',
    code: "res.status(404).send('Not found');",
    options: ['res.code(404)', 'res.status(404)', 'res.setStatus(404)', 'res.send(404)'],
    correctAnswer: 1,
  },
  {
    id: 19,
    question: 'What does express.urlencoded() do?',
    code: 'app.use(express.urlencoded({ extended: true }));',
    options: ['Parses URL-encoded request bodies', 'Encodes URLs', 'Decodes query parameters', 'Handles file uploads'],
    correctAnswer: 0,
  },
  {
    id: 20,
    question: 'How do you implement sessions in Express?',
    code: "const session = require('express-session');\napp.use(session({ secret: 'key' }));",
    options: ['express.session()', 'express-session middleware', 'cookie-session middleware', 'Both B and C'],
    correctAnswer: 3,
  },
  {
    id: 21,
    question: 'What is the purpose of app.locals?',
    code: "app.locals.title = 'My App';",
    options: [
      'Stores application-wide variables',
      'Handles local file storage',
      'Manages route localization',
      'Configures local databases',
    ],
    correctAnswer: 0,
  },
  {
    id: 22,
    question: 'How do you handle 404 errors?',
    code: "app.use((req, res) => {\n  res.status(404).send('Not found');\n});",
    options: ['As the last middleware', 'As the first middleware', 'Using app.error()', 'Using express.notFound()'],
    correctAnswer: 0,
  },
  {
    id: 23,
    question: 'What is the purpose of res.json()?',
    code: "res.json({ key: 'value' });",
    options: ['Sends JSON response', 'Parses JSON request', 'Validates JSON', 'Converts to JSON'],
    correctAnswer: 0,
  },
  {
    id: 24,
    question: 'How do you implement CORS in Express?',
    code: "const cors = require('cors');\napp.use(cors());",
    options: ['express.cors()', 'cors middleware', 'app.enableCors()', 'All of the above'],
    correctAnswer: 1,
  },
  {
    id: 25,
    question: 'What does app.engine() do?',
    code: "app.engine('html', require('ejs').renderFile);",
    options: [
      'Registers template engines',
      'Configures search engines',
      'Handles engine errors',
      'Manages database engines',
    ],
    correctAnswer: 0,
  },
  {
    id: 26,
    question: 'How do you handle file uploads?',
    code: "const multer = require('multer');\nconst upload = multer({ dest: 'uploads/' });",
    options: ['express-fileupload', 'multer middleware', 'body-parser', 'Both A and B'],
    correctAnswer: 3,
  },
  {
    id: 27,
    question: 'What is the purpose of req.app?',
    code: "req.app.get('setting');",
    options: [
      'References the Express app instance',
      'Handles app authentication',
      'Manages application state',
      'Configures app settings',
    ],
    correctAnswer: 0,
  },
  {
    id: 28,
    question: 'How do you chain route handlers?',
    code: "app.route('/book')\n  .get((req, res) => {})\n  .post((req, res) => {});",
    options: ['app.chain()', 'app.route()', 'app.handler()', 'app.pipe()'],
    correctAnswer: 1,
  },
  {
    id: 29,
    question: 'What is the purpose of res.render()?',
    code: "res.render('view', { data });",
    options: ['Renders a template view', 'Sends raw HTML', 'Redirects to a view', 'Configures views'],
    correctAnswer: 0,
  },
  {
    id: 30,
    question: 'How do you enable HTTPS in Express?',
    code: "const https = require('https');\nconst fs = require('fs');\nconst options = { key: fs.readFileSync('key.pem'), cert: fs.readFileSync('cert.pem') };\nhttps.createServer(options, app).listen(443);",
    options: ['express.https()', "Using Node's https module", 'app.enableTLS()', 'express.secure()'],
    correctAnswer: 1,
  },
];
