import { Question } from '@/features/mockInterviews/types/questions';

export const springBootQuestions: Question[] = [
  {
    id: 1,
    question: 'What is Spring Boot?',
    code: '',
    options: [
      'A Java testing framework',
      'An extension of Spring framework for rapid application development',
      'A database management system',
      'A frontend JavaScript library',
    ],
    correctAnswer: 1,
  },
  {
    id: 2,
    question: 'What is the main advantage of using Spring Boot?',
    code: '',
    options: [
      'Automatic configuration',
      'Built-in servers (Tomcat, Jetty)',
      'Starter dependencies',
      'All of the above',
    ],
    correctAnswer: 3,
  },
  {
    id: 3,
    question: 'What does @SpringBootApplication annotation do?',
    code: '',
    options: [
      'Configures component scanning',
      'Enables auto-configuration',
      'Enables Spring Boot features',
      'All of the above',
    ],
    correctAnswer: 3,
  },
  {
    id: 4,
    question: 'Which embedded servers does Spring Boot support?',
    code: '',
    options: ['Tomcat', 'Jetty', 'Undertow', 'All of the above'],
    correctAnswer: 3,
  },
  {
    id: 5,
    question: 'What is the purpose of Spring Boot starters?',
    code: '',
    options: [
      'To provide production-ready features',
      'To simplify dependency management',
      'To configure databases automatically',
      'To handle security',
    ],
    correctAnswer: 1,
  },
  {
    id: 6,
    question: 'Where would you place application.properties in a Spring Boot project?',
    code: '',
    options: ['src/main/java', 'src/main/resources', 'src/test/resources', 'src/main/webapp'],
    correctAnswer: 1,
  },
  {
    id: 7,
    question: 'How can you override default properties in Spring Boot?',
    code: '',
    options: [
      'Using application.properties',
      'Using application.yml',
      'Using command line arguments',
      'All of the above',
    ],
    correctAnswer: 3,
  },
  {
    id: 8,
    question: 'What is Spring Boot Actuator used for?',
    code: '',
    options: [
      'Monitoring application metrics',
      'Managing application health',
      'Exposing operational information',
      'All of the above',
    ],
    correctAnswer: 3,
  },
  {
    id: 9,
    question: 'What is the default port for embedded Tomcat in Spring Boot?',
    code: '',
    options: ['8080', '8000', '8443', '80'],
    correctAnswer: 0,
  },
  {
    id: 10,
    question: 'How can you change the default port in Spring Boot?',
    code: '',
    options: [
      'server.port=9090 in application.properties',
      '@Value("${server.port}")',
      'Using @Port annotation',
      'It cannot be changed',
    ],
    correctAnswer: 0,
  },
  {
    id: 11,
    question: 'What is the purpose of @RestController annotation?',
    code: '',
    options: [
      'To create RESTful web services',
      'To indicate the class is a controller',
      'To combine @Controller and @ResponseBody',
      'All of the above',
    ],
    correctAnswer: 3,
  },
  {
    id: 12,
    question: 'What is Spring Data JPA?',
    code: '',
    options: [
      'A Java Persistence API implementation',
      'A way to simplify database access',
      'An abstraction over JPA providers',
      'All of the above',
    ],
    correctAnswer: 3,
  },
  {
    id: 13,
    question: 'What does @Autowired annotation do?',
    code: '',
    options: [
      'Creates a new instance of a class',
      'Enables dependency injection',
      'Configures database connection',
      'Handles HTTP requests',
    ],
    correctAnswer: 1,
  },
  {
    id: 14,
    question: 'What is the purpose of @ComponentScan?',
    code: '',
    options: [
      'To scan for Spring components',
      'To configure package scanning',
      'To enable auto-detection of beans',
      'All of the above',
    ],
    correctAnswer: 3,
  },
  {
    id: 15,
    question: 'How can you enable Spring Boot security?',
    code: '',
    options: [
      'Add spring-boot-starter-security dependency',
      'Create a SecurityConfig class',
      'Use @EnableWebSecurity annotation',
      'All of the above',
    ],
    correctAnswer: 3,
  },
  {
    id: 16,
    question: 'What is Spring Boot DevTools used for?',
    code: '',
    options: [
      'Developer productivity tools',
      'Automatic restart on code changes',
      'Live reload capabilities',
      'All of the above',
    ],
    correctAnswer: 3,
  },
  {
    id: 17,
    question: 'What is the purpose of @Repository annotation?',
    code: '',
    options: [
      'To indicate a class as a DAO',
      'To enable exception translation',
      'To perform database operations',
      'All of the above',
    ],
    correctAnswer: 3,
  },
  {
    id: 18,
    question: 'How can you create a custom endpoint in Spring Boot Actuator?',
    code: '',
    options: [
      'By implementing Endpoint interface',
      'Using @Endpoint annotation',
      'Extending AbstractEndpoint class',
      'All of the above',
    ],
    correctAnswer: 3,
  },
  {
    id: 19,
    question: 'What is the purpose of @ConfigurationProperties?',
    code: '',
    options: [
      'To bind external properties to Java objects',
      'To configure Spring beans',
      'To manage application settings',
      'All of the above',
    ],
    correctAnswer: 0,
  },
  {
    id: 20,
    question: 'How can you externalize configuration in Spring Boot?',
    code: '',
    options: [
      'Using application.properties',
      'Using environment variables',
      'Using command line arguments',
      'All of the above',
    ],
    correctAnswer: 3,
  },
  {
    id: 21,
    question: 'What is the purpose of @Service annotation?',
    code: '',
    options: [
      'To indicate a class as a service layer',
      'To enable transaction management',
      'To perform business logic',
      'All of the above',
    ],
    correctAnswer: 0,
  },
  {
    id: 22,
    question: 'How can you handle exceptions globally in Spring Boot?',
    code: '',
    options: [
      'Using @ControllerAdvice',
      'Implementing HandlerExceptionResolver',
      'Using @ExceptionHandler',
      'All of the above',
    ],
    correctAnswer: 3,
  },
  {
    id: 23,
    question: 'What is the purpose of @Transactional annotation?',
    code: '',
    options: [
      'To define transaction boundaries',
      'To enable ACID properties',
      'To manage database operations',
      'All of the above',
    ],
    correctAnswer: 3,
  },
  {
    id: 24,
    question: 'How can you enable caching in Spring Boot?',
    code: '',
    options: [
      'Add spring-boot-starter-cache dependency',
      'Use @EnableCaching annotation',
      'Annotate methods with @Cacheable',
      'All of the above',
    ],
    correctAnswer: 3,
  },
  {
    id: 25,
    question: 'What is Spring Boot CLI?',
    code: '',
    options: [
      'A command line interface for Spring Boot',
      'A tool to run Groovy scripts',
      'A way to quickly prototype applications',
      'All of the above',
    ],
    correctAnswer: 3,
  },
  {
    id: 26,
    question: 'How can you profile-specific properties in Spring Boot?',
    code: '',
    options: [
      'application-{profile}.properties',
      'Using @Profile annotation',
      'Through environment variables',
      'All of the above',
    ],
    correctAnswer: 0,
  },
  {
    id: 27,
    question: 'What is the purpose of @Value annotation?',
    code: '',
    options: [
      'To inject property values',
      'To read from application.properties',
      'To configure environment variables',
      'All of the above',
    ],
    correctAnswer: 3,
  },
  {
    id: 28,
    question: 'How can you create a fat JAR in Spring Boot?',
    code: '',
    options: [
      'Using spring-boot-maven-plugin',
      'Using maven-assembly-plugin',
      'Manually packaging dependencies',
      'All of the above',
    ],
    correctAnswer: 0,
  },
  {
    id: 29,
    question: 'What is the purpose of @EnableAutoConfiguration?',
    code: '',
    options: [
      'To enable Spring Boot auto-configuration',
      'To automatically configure beans',
      'To simplify application setup',
      'All of the above',
    ],
    correctAnswer: 3,
  },
  {
    id: 30,
    question: 'How can you implement internationalization in Spring Boot?',
    code: '',
    options: [
      'Using MessageSource',
      'Creating locale-specific property files',
      'Using LocaleResolver',
      'All of the above',
    ],
    correctAnswer: 3,
  },
];
