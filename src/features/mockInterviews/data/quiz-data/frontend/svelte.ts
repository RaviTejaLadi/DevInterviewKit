import { Question } from '@/features/mockInterviews/types/questions';

export const svelteQuestions: Question[] = [
  {
    id: 1,
    question: 'What is Svelte?',
    code: '',
    options: [
      'A JavaScript framework for building user interfaces',
      'A compiler that converts components into efficient JavaScript',
      'A state management library',
      'A server-side rendering tool',
    ],
    correctAnswer: 1,
  },
  {
    id: 2,
    question: 'How does Svelte differ from React/Vue?',
    code: '',
    options: [
      'Svelte uses a virtual DOM for updates',
      'Svelte compiles components at build time, eliminating the need for a runtime framework',
      'Svelte requires a heavier runtime than React',
      'Svelte is only for server-side rendering',
    ],
    correctAnswer: 1,
  },
  {
    id: 3,
    question: 'What is a Svelte store?',
    code: '',
    options: [
      'A component that holds HTML templates',
      'A reactive state container that can be shared across components',
      'A database connection tool',
      'A built-in HTTP client',
    ],
    correctAnswer: 1,
  },
  {
    id: 4,
    question: 'How do you define reactive variables in Svelte?',
    code: '',
    options: [
      'Using `let` inside a `<script>` block',
      'Using `const` with a special `@reactive` decorator',
      'Using `state` keyword',
      'Only via Svelte stores',
    ],
    correctAnswer: 0,
  },
  {
    id: 5,
    question: 'What is the purpose of `$:` in Svelte?',
    code: '',
    options: [
      'To define a CSS style block',
      'To mark reactive statements',
      'To import external modules',
      'To declare a Svelte store',
    ],
    correctAnswer: 1,
  },
  {
    id: 6,
    question: 'How do you bind an input value to a variable in Svelte?',
    code: '',
    options: [
      '<input value={name} />',
      '<input bind:value={name} />',
      '<input v-model="name" />',
      '<input @bind="name" />',
    ],
    correctAnswer: 1,
  },
  {
    id: 7,
    question: 'What is the equivalent of `v-if` (Vue) or conditional rendering in Svelte?',
    code: '',
    options: [
      '{#if condition} ... {/if}',
      '<If condition={...}> ... </If>',
      '<div v-if="condition"> ... </div>',
      '<Show when={condition}> ... </Show>',
    ],
    correctAnswer: 0,
  },
  {
    id: 8,
    question: 'How do you loop over an array in Svelte?',
    code: '',
    options: [
      '{#each items as item} ... {/each}',
      '<For each={items}> ... </For>',
      '<div v-for="item in items"> ... </div>',
      '{items.map(item => ...)}',
    ],
    correctAnswer: 0,
  },
  {
    id: 9,
    question: 'What is the correct way to handle events in Svelte?',
    code: '',
    options: [
      '<button @click="handleClick">Click</button>',
      '<button on:click={handleClick}>Click</button>',
      '<button onClick={handleClick}>Click</button>',
      '<button v-on:click="handleClick">Click</button>',
    ],
    correctAnswer: 1,
  },
  {
    id: 10,
    question: 'How do you create a writable store in Svelte?',
    code: '',
    options: [
      'import { store } from "svelte"; const myStore = store(initialValue);',
      'import { writable } from "svelte/store"; const myStore = writable(initialValue);',
      'const myStore = new Svelte.Store(initialValue);',
      'import { reactive } from "svelte"; const myStore = reactive(initialValue);',
    ],
    correctAnswer: 1,
  },
  {
    id: 11,
    question: 'How do you subscribe to a Svelte store in a component?',
    code: '',
    options: [
      'const value = store.subscribe();',
      'const value = $store;',
      'const value = useStore(store);',
      'const value = get(store);',
    ],
    correctAnswer: 1,
  },
  {
    id: 12,
    question: 'What is the purpose of `export let` in Svelte?',
    code: '',
    options: [
      'To make a variable available to child components',
      'To declare a prop that a parent component can pass',
      'To export a module for use in other files',
      'To create a reactive variable',
    ],
    correctAnswer: 1,
  },
  {
    id: 13,
    question: 'How do you dispatch a custom event in Svelte?',
    code: '',
    options: [
      'this.dispatch("eventName", detail);',
      'dispatchEvent(new CustomEvent("eventName", { detail }));',
      'import { createEventDispatcher } from "svelte"; const dispatch = createEventDispatcher(); dispatch("eventName", detail);',
      'this.$emit("eventName", detail);',
    ],
    correctAnswer: 2,
  },
  {
    id: 14,
    question: 'What is the `<svelte:self>` component used for?',
    code: '',
    options: [
      'To reference the current component recursively',
      'To import another Svelte file',
      'To define a slot',
      'To create a self-closing element',
    ],
    correctAnswer: 0,
  },
  {
    id: 15,
    question: 'How do you define CSS scoped to a component in Svelte?',
    code: '',
    options: [
      'By adding `scoped` to the `<style>` tag',
      'By default, styles in `<style>` are scoped to the component',
      'By using CSS Modules syntax',
      'By wrapping styles in `@scope`',
    ],
    correctAnswer: 1,
  },
  {
    id: 16,
    question: 'What is the purpose of `svelte:window`?',
    code: '',
    options: [
      'To create a new browser window',
      'To add event listeners to the `window` object',
      'To define global CSS variables',
      'To embed another Svelte app',
    ],
    correctAnswer: 1,
  },
  {
    id: 17,
    question: 'How do you perform animations in Svelte?',
    code: '',
    options: [
      'Using the `animate` directive',
      'Using the `svelte/animate` package',
      'By importing `@sveltejs/motion`',
      'Svelte has built-in animation helpers like `fade`, `slide`, etc.',
    ],
    correctAnswer: 3,
  },
  {
    id: 18,
    question: 'What is the `svelte:head` component used for?',
    code: '',
    options: [
      'To dynamically modify the `<head>` of the document',
      'To define the main heading of a page',
      'To create a header component',
      'To manage global state',
    ],
    correctAnswer: 0,
  },
  {
    id: 19,
    question: 'How do you implement two-way binding in Svelte?',
    code: '',
    options: [
      'Using `v-model` like in Vue',
      'Using `bind:property` syntax',
      'Using `@bind` directive',
      'Two-way binding is not supported in Svelte',
    ],
    correctAnswer: 1,
  },
  {
    id: 20,
    question: 'What is the purpose of `tick()` in Svelte?',
    code: '',
    options: [
      'To delay execution for a specified time',
      'To force a component re-render',
      'To wait for the next DOM update cycle',
      'To create a timer',
    ],
    correctAnswer: 2,
  },
  {
    id: 21,
    question: 'How do you use slots in Svelte?',
    code: '',
    options: [
      '<slot name="default" />',
      '<div slot="name"> ... </div>',
      'Using the `<Slot>` component',
      'Slots are not supported in Svelte',
    ],
    correctAnswer: 0,
  },
  {
    id: 22,
    question: 'What is the `svelte:options` tag used for?',
    code: '',
    options: [
      'To configure compiler options for a component',
      'To define routing options',
      'To pass props to child components',
      'To set up SSR settings',
    ],
    correctAnswer: 0,
  },
  {
    id: 23,
    question: 'How do you handle async data fetching in Svelte?',
    code: '',
    options: [
      'Using `useEffect` like in React',
      'Using `onMount` lifecycle function',
      'Using `async/await` directly in the `<script>` block',
      'Svelte does not support async operations',
    ],
    correctAnswer: 2,
  },
  {
    id: 24,
    question: 'What is the purpose of `@html` in Svelte?',
    code: '',
    options: [
      'To render raw HTML (with caution)',
      'To import an HTML file',
      'To define a template literal',
      'To escape HTML content',
    ],
    correctAnswer: 0,
  },
  {
    id: 25,
    question: 'How do you create a derived store in Svelte?',
    code: '',
    options: [
      'import { derived } from "svelte/store"; const doubled = derived(base, $value => $value * 2);',
      'const doubled = base.map(value => value * 2);',
      'import { compute } from "svelte"; const doubled = compute(base, value => value * 2);',
      'Derived stores are not possible in Svelte',
    ],
    correctAnswer: 0,
  },
  {
    id: 26,
    question: 'What is the `svelte:component` tag used for?',
    code: '',
    options: [
      'To dynamically render different components',
      'To define a new component',
      'To import a component from another file',
      'To create a reusable template',
    ],
    correctAnswer: 0,
  },
  {
    id: 27,
    question: 'How do you access the DOM element in Svelte?',
    code: '',
    options: [
      'Using `document.querySelector()`',
      'Using `ref` like in React',
      'Using `bind:this={elementRef}`',
      'Using `this.$el`',
    ],
    correctAnswer: 2,
  },
  {
    id: 28,
    question: 'What is the purpose of `context="module"` in Svelte?',
    code: '',
    options: [
      'To define SSR-specific logic',
      'To create variables shared across all component instances',
      'To import Node.js modules',
      'To enable strict mode',
    ],
    correctAnswer: 1,
  },
  {
    id: 29,
    question: 'How do you implement transitions in Svelte?',
    code: '',
    options: [
      'Using CSS transitions only',
      'Using the `svelte/transition` module (e.g., `fade`, `fly`)',
      'Using external animation libraries only',
      'Transitions are not supported in Svelte',
    ],
    correctAnswer: 1,
  },
  {
    id: 30,
    question: 'What is SvelteKit?',
    code: '',
    options: [
      'A UI component library for Svelte',
      'An official framework for building Svelte apps with routing, SSR, and more',
      'A state management solution',
      'A testing framework for Svelte',
    ],
    correctAnswer: 1,
  },
];
