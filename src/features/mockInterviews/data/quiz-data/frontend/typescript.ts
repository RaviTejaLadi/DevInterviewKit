import { Question } from '@/features/mockInterviews/types/questions';

export const typescriptQuestions: Question[] = [
  {
    id: 1,
    question: 'What is TypeScript?',
    code: '',
    options: [
      'A superset of JavaScript that adds static typing',
      'A new programming language unrelated to JavaScript',
      'A JavaScript framework',
      'A database query language',
    ],
    correctAnswer: 0,
  },
  {
    id: 2,
    question: 'What is the main benefit of using TypeScript?',
    code: '',
    options: [
      'Faster runtime performance',
      'Static type checking at compile time',
      'Smaller bundle size',
      'Built-in virtual DOM',
    ],
    correctAnswer: 1,
  },
  {
    id: 3,
    question: 'How do you define a variable with a specific type in TypeScript?',
    code: '',
    options: ['let variable: type', 'let type = variable', 'variable: let type', 'type let variable'],
    correctAnswer: 0,
  },
  {
    id: 4,
    question: "What is the purpose of the 'any' type?",
    code: '',
    options: [
      'To represent any JavaScript value without type checking',
      'To represent an empty value',
      'To represent an array of any types',
      'To represent a function that can return anything',
    ],
    correctAnswer: 0,
  },
  {
    id: 5,
    question: 'What is a TypeScript interface?',
    code: '',
    options: [
      'A way to define the structure of an object',
      'A connection between two classes',
      'A type of function',
      'A module export mechanism',
    ],
    correctAnswer: 0,
  },
  {
    id: 6,
    question: 'How do you make a property optional in an interface?',
    code: '',
    options: ['property?: type', 'optional property: type', 'property: optional type', 'property: type?'],
    correctAnswer: 0,
  },
  {
    id: 7,
    question: "What is the difference between 'interface' and 'type' in TypeScript?",
    code: '',
    options: [
      'They are completely identical',
      "Interfaces can be extended, type aliases can't",
      "Type aliases can create unions, interfaces can't",
      'Interfaces are for objects only, types are for primitives',
    ],
    correctAnswer: 2,
  },
  {
    id: 8,
    question: 'What are TypeScript generics?',
    code: '',
    options: [
      'A way to create reusable components that work with multiple types',
      'Special types for generic programming concepts',
      'A type of loop in TypeScript',
      'Built-in utility types',
    ],
    correctAnswer: 0,
  },
  {
    id: 9,
    question: 'What is type inference in TypeScript?',
    code: '',
    options: [
      'The ability to automatically determine types',
      'A way to convert types at runtime',
      'A type checking algorithm',
      'A debugging feature',
    ],
    correctAnswer: 0,
  },
  {
    id: 10,
    question: "What is the 'unknown' type in TypeScript?",
    code: '',
    options: [
      "A type-safe counterpart of 'any'",
      'A type for variables that might be null',
      'A deprecated type',
      'A type for async operations',
    ],
    correctAnswer: 0,
  },
  {
    id: 11,
    question: 'What is a TypeScript enum?',
    code: '',
    options: [
      'A way to define a set of named constants',
      'A type of loop',
      'A special kind of interface',
      'A module system',
    ],
    correctAnswer: 0,
  },
  {
    id: 12,
    question: "What is the 'never' type in TypeScript?",
    code: '',
    options: [
      'A type for values that never occur',
      'A deprecated type',
      'A type for empty arrays',
      'A type for async functions',
    ],
    correctAnswer: 0,
  },
  {
    id: 13,
    question: 'What are TypeScript decorators?',
    code: '',
    options: [
      'Special declarations that can modify classes or properties',
      'Comments that affect type checking',
      'A type of interface',
      'Formatting rules',
    ],
    correctAnswer: 0,
  },
  {
    id: 14,
    question: "What is the 'keyof' operator in TypeScript?",
    code: '',
    options: [
      'Gets the keys of an object type as a union',
      'Checks if a key exists in an object',
      'Creates a new object with selected keys',
      'A deprecated operator',
    ],
    correctAnswer: 0,
  },
  {
    id: 15,
    question: "What is the 'as' keyword used for in TypeScript?",
    code: '',
    options: ['Type assertion', 'Alias creation', 'Async function declaration', 'Class inheritance'],
    correctAnswer: 0,
  },
  {
    id: 16,
    question: 'What are TypeScript utility types?',
    code: '',
    options: [
      'Predefined generic types for common type transformations',
      'Types for utility functions',
      'Built-in helper functions',
      'Types for Node.js utilities',
    ],
    correctAnswer: 0,
  },
  {
    id: 17,
    question: "What is the 'Partial' utility type used for?",
    code: '',
    options: [
      'To make all properties of a type optional',
      'To select part of an object type',
      'To create a type with some properties removed',
      'To make a type nullable',
    ],
    correctAnswer: 0,
  },
  {
    id: 18,
    question: "What is the purpose of 'readonly' in TypeScript?",
    code: '',
    options: [
      'To make properties immutable',
      'To mark properties as deprecated',
      'To indicate a property should be read from a file',
      'To optimize performance',
    ],
    correctAnswer: 0,
  },
  {
    id: 19,
    question: 'What is a type guard in TypeScript?',
    code: '',
    options: [
      'An expression that narrows down the type within a scope',
      'A security feature',
      'A compiler option',
      'A type of decorator',
    ],
    correctAnswer: 0,
  },
  {
    id: 20,
    question: "What is the 'satisfies' operator in TypeScript?",
    code: '',
    options: [
      'Checks that a value matches a type without changing its type',
      'A deprecated operator',
      'A type conversion operator',
      'An async/await helper',
    ],
    correctAnswer: 0,
  },
  {
    id: 21,
    question: "What is the 'in' operator narrowing in TypeScript?",
    code: '',
    options: [
      'A way to narrow types based on property existence',
      'A loop construct',
      'A module import syntax',
      'A deprecated feature',
    ],
    correctAnswer: 0,
  },
  {
    id: 22,
    question: 'What are TypeScript namespaces?',
    code: '',
    options: [
      'A way to organize code and prevent naming collisions',
      'A type of module',
      'A deprecated feature replaced by ES modules',
      'A type of interface',
    ],
    correctAnswer: 0,
  },
  {
    id: 23,
    question: "What is the 'declare' keyword used for in TypeScript?",
    code: '',
    options: [
      'To tell TypeScript about types that exist elsewhere',
      'To create new types',
      'To declare variables',
      'To mark types as public',
    ],
    correctAnswer: 0,
  },
  {
    id: 24,
    question: "What is the 'non-null assertion operator' in TypeScript?",
    code: '',
    options: ['!', '?', '??', '?:'],
    correctAnswer: 0,
  },
  {
    id: 25,
    question: "What is the 'Pick' utility type used for?",
    code: '',
    options: [
      'To select a subset of properties from a type',
      'To choose between union types',
      'To mark properties as required',
      'To create new object types',
    ],
    correctAnswer: 0,
  },
  {
    id: 26,
    question: "What is the 'Omit' utility type used for?",
    code: '',
    options: [
      'To exclude certain properties from a type',
      'To make properties optional',
      'To remove null and undefined from a type',
      'To flatten nested types',
    ],
    correctAnswer: 0,
  },
  {
    id: 27,
    question: "What is the 'Record' utility type used for?",
    code: '',
    options: [
      'To create an object type with specific key and value types',
      'To create an array type',
      'To define a type for audio recordings',
      'To mark types as immutable',
    ],
    correctAnswer: 0,
  },
  {
    id: 28,
    question: "What is the 'extends' keyword used for in generics?",
    code: '',
    options: [
      'To constrain generic type parameters',
      'To create class inheritance',
      'To extend interface properties',
      'To mark types as deprecated',
    ],
    correctAnswer: 0,
  },
  {
    id: 29,
    question: "What is the 'infer' keyword used for in TypeScript?",
    code: '',
    options: [
      'To infer types within conditional types',
      'To infer function return types',
      'A deprecated keyword',
      'To infer class properties',
    ],
    correctAnswer: 0,
  },
  {
    id: 30,
    question: "What is the 'Awaited' utility type used for?",
    code: '',
    options: [
      'To unwrap Promise types',
      'To await async functions',
      'To create async interfaces',
      'To handle Promise rejections',
    ],
    correctAnswer: 0,
  },
];
